module Exercise09 where

{- Exercise 1.9.
-- Each of the following two procedures defines a method for
-- adding two positive integers in terms of the procedures
-- inc, which increments its argument by 1, and dec, which
-- decrements its argument by 1.
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))

-- Using the substitution model, illustrate the process
-- generated by each procedure in evaluating (+ 4 5).
-- Are these processes iterative or recursive?
-}

{- IMPORTANT NOTE
-- The processes below may not relate to Haskell
-}

let dec = pred
let inc = succ

-- in Haskell:
add :: Int -> Int
add 0 b = b
add a b = inc (add (dec a) b)

{- the first procedure's process:
(+ 4 5)
(inc (+ (dec 4) 5))
(inc (+ 3 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
-- linear recursive process
-}

-- in Haskell:
add' :: Int -> Int
add' 0 b = b
add' a b = add (dec a) (inc b)

{- the second procedure's process:
(+ 4 5)
(+ (dec 4) (inc 5))
(+ 3 6)
(+ (dec 3) (inc 6))
(+ 2 6)
(+ (dec 2) (inc 6))
(+ 1 7)
(+ (dec 1) (inc 7))
(+ 0 8)
8
-- iterative process
-}
